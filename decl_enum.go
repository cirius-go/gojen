// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package gojen

import (
	"fmt"
	"strings"
)

const (
	// StrategyInit is a Strategy of type init.
	StrategyInit Strategy = "init"
	// StrategyPrependAtHead is a Strategy of type prepend_at_head.
	StrategyPrependAtHead Strategy = "prepend_at_head"
	// StrategyPrepend is a Strategy of type prepend.
	StrategyPrepend Strategy = "prepend"
	// StrategyAppend is a Strategy of type append.
	StrategyAppend Strategy = "append"
	// StrategyAppendAtPos is a Strategy of type append_at_pos.
	StrategyAppendAtPos Strategy = "append_at_pos"
	// StrategyEdit is a Strategy of type edit.
	StrategyEdit Strategy = "edit"
)

var ErrInvalidStrategy = fmt.Errorf("not a valid Strategy, try [%s]", strings.Join(_StrategyNames, ", "))

var _StrategyNames = []string{
	string(StrategyInit),
	string(StrategyPrependAtHead),
	string(StrategyPrepend),
	string(StrategyAppend),
	string(StrategyAppendAtPos),
	string(StrategyEdit),
}

// StrategyNames returns a list of possible string values of Strategy.
func StrategyNames() []string {
	tmp := make([]string, len(_StrategyNames))
	copy(tmp, _StrategyNames)
	return tmp
}

// StrategyValues returns a list of the values for Strategy
func StrategyValues() []Strategy {
	return []Strategy{
		StrategyInit,
		StrategyPrependAtHead,
		StrategyPrepend,
		StrategyAppend,
		StrategyAppendAtPos,
		StrategyEdit,
	}
}

// String implements the Stringer interface.
func (x Strategy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Strategy) IsValid() bool {
	_, err := ParseStrategy(string(x))
	return err == nil
}

var _StrategyValue = map[string]Strategy{
	"init":            StrategyInit,
	"prepend_at_head": StrategyPrependAtHead,
	"prepend":         StrategyPrepend,
	"append":          StrategyAppend,
	"append_at_pos":   StrategyAppendAtPos,
	"edit":            StrategyEdit,
}

// ParseStrategy attempts to convert a string to a Strategy.
func ParseStrategy(name string) (Strategy, error) {
	if x, ok := _StrategyValue[name]; ok {
		return x, nil
	}
	return Strategy(""), fmt.Errorf("%s is %w", name, ErrInvalidStrategy)
}

// MarshalText implements the text marshaller method.
func (x Strategy) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Strategy) UnmarshalText(text []byte) error {
	tmp, err := ParseStrategy(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
