// Code generated by mockery. DO NOT EDIT.

package gojen

import mock "github.com/stretchr/testify/mock"

// ConsoleManager is an autogenerated mock type for the ConsoleManager type
type ConsoleManager struct {
	mock.Mock
}

type ConsoleManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsoleManager) EXPECT() *ConsoleManager_Expecter {
	return &ConsoleManager_Expecter{mock: &_m.Mock}
}

// DangerStringf provides a mock function with given fields: msg, args
func (_m *ConsoleManager) DangerStringf(msg string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DangerStringf")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(msg, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsoleManager_DangerStringf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DangerStringf'
type ConsoleManager_DangerStringf_Call struct {
	*mock.Call
}

// DangerStringf is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) DangerStringf(msg interface{}, args ...interface{}) *ConsoleManager_DangerStringf_Call {
	return &ConsoleManager_DangerStringf_Call{Call: _e.mock.On("DangerStringf",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ConsoleManager_DangerStringf_Call) Run(run func(msg string, args ...interface{})) *ConsoleManager_DangerStringf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_DangerStringf_Call) Return(_a0 string) *ConsoleManager_DangerStringf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_DangerStringf_Call) RunAndReturn(run func(string, ...interface{}) string) *ConsoleManager_DangerStringf_Call {
	_c.Call.Return(run)
	return _c
}

// Dangerf provides a mock function with given fields: l, msg, args
func (_m *ConsoleManager) Dangerf(l bool, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, l, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ConsoleManager_Dangerf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dangerf'
type ConsoleManager_Dangerf_Call struct {
	*mock.Call
}

// Dangerf is a helper method to define mock.On call
//   - l bool
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) Dangerf(l interface{}, msg interface{}, args ...interface{}) *ConsoleManager_Dangerf_Call {
	return &ConsoleManager_Dangerf_Call{Call: _e.mock.On("Dangerf",
		append([]interface{}{l, msg}, args...)...)}
}

func (_c *ConsoleManager_Dangerf_Call) Run(run func(l bool, msg string, args ...interface{})) *ConsoleManager_Dangerf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(bool), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_Dangerf_Call) Return() *ConsoleManager_Dangerf_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsoleManager_Dangerf_Call) RunAndReturn(run func(bool, string, ...interface{})) *ConsoleManager_Dangerf_Call {
	_c.Call.Return(run)
	return _c
}

// InfoStringf provides a mock function with given fields: msg, args
func (_m *ConsoleManager) InfoStringf(msg string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InfoStringf")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(msg, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsoleManager_InfoStringf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoStringf'
type ConsoleManager_InfoStringf_Call struct {
	*mock.Call
}

// InfoStringf is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) InfoStringf(msg interface{}, args ...interface{}) *ConsoleManager_InfoStringf_Call {
	return &ConsoleManager_InfoStringf_Call{Call: _e.mock.On("InfoStringf",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ConsoleManager_InfoStringf_Call) Run(run func(msg string, args ...interface{})) *ConsoleManager_InfoStringf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_InfoStringf_Call) Return(_a0 string) *ConsoleManager_InfoStringf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_InfoStringf_Call) RunAndReturn(run func(string, ...interface{}) string) *ConsoleManager_InfoStringf_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: l, msg, args
func (_m *ConsoleManager) Infof(l bool, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, l, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ConsoleManager_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type ConsoleManager_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - l bool
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) Infof(l interface{}, msg interface{}, args ...interface{}) *ConsoleManager_Infof_Call {
	return &ConsoleManager_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{l, msg}, args...)...)}
}

func (_c *ConsoleManager_Infof_Call) Run(run func(l bool, msg string, args ...interface{})) *ConsoleManager_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(bool), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_Infof_Call) Return() *ConsoleManager_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsoleManager_Infof_Call) RunAndReturn(run func(bool, string, ...interface{})) *ConsoleManager_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// PerformYesNo provides a mock function with given fields: msg, args
func (_m *ConsoleManager) PerformYesNo(msg string, args ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PerformYesNo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...interface{}) bool); ok {
		r0 = rf(msg, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleManager_PerformYesNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformYesNo'
type ConsoleManager_PerformYesNo_Call struct {
	*mock.Call
}

// PerformYesNo is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) PerformYesNo(msg interface{}, args ...interface{}) *ConsoleManager_PerformYesNo_Call {
	return &ConsoleManager_PerformYesNo_Call{Call: _e.mock.On("PerformYesNo",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ConsoleManager_PerformYesNo_Call) Run(run func(msg string, args ...interface{})) *ConsoleManager_PerformYesNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_PerformYesNo_Call) Return(_a0 bool) *ConsoleManager_PerformYesNo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_PerformYesNo_Call) RunAndReturn(run func(string, ...interface{}) bool) *ConsoleManager_PerformYesNo_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: l, msg, args
func (_m *ConsoleManager) Printf(l bool, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, l, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ConsoleManager_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type ConsoleManager_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - l bool
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) Printf(l interface{}, msg interface{}, args ...interface{}) *ConsoleManager_Printf_Call {
	return &ConsoleManager_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{l, msg}, args...)...)}
}

func (_c *ConsoleManager_Printf_Call) Run(run func(l bool, msg string, args ...interface{})) *ConsoleManager_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(bool), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_Printf_Call) Return() *ConsoleManager_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsoleManager_Printf_Call) RunAndReturn(run func(bool, string, ...interface{})) *ConsoleManager_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// Scanln provides a mock function with given fields:
func (_m *ConsoleManager) Scanln() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scanln")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleManager_Scanln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scanln'
type ConsoleManager_Scanln_Call struct {
	*mock.Call
}

// Scanln is a helper method to define mock.On call
func (_e *ConsoleManager_Expecter) Scanln() *ConsoleManager_Scanln_Call {
	return &ConsoleManager_Scanln_Call{Call: _e.mock.On("Scanln")}
}

func (_c *ConsoleManager_Scanln_Call) Run(run func()) *ConsoleManager_Scanln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleManager_Scanln_Call) Return(_a0 []byte, _a1 error) *ConsoleManager_Scanln_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleManager_Scanln_Call) RunAndReturn(run func() ([]byte, error)) *ConsoleManager_Scanln_Call {
	_c.Call.Return(run)
	return _c
}

// SuccessStringf provides a mock function with given fields: msg, args
func (_m *ConsoleManager) SuccessStringf(msg string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SuccessStringf")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(msg, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsoleManager_SuccessStringf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuccessStringf'
type ConsoleManager_SuccessStringf_Call struct {
	*mock.Call
}

// SuccessStringf is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) SuccessStringf(msg interface{}, args ...interface{}) *ConsoleManager_SuccessStringf_Call {
	return &ConsoleManager_SuccessStringf_Call{Call: _e.mock.On("SuccessStringf",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ConsoleManager_SuccessStringf_Call) Run(run func(msg string, args ...interface{})) *ConsoleManager_SuccessStringf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_SuccessStringf_Call) Return(_a0 string) *ConsoleManager_SuccessStringf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_SuccessStringf_Call) RunAndReturn(run func(string, ...interface{}) string) *ConsoleManager_SuccessStringf_Call {
	_c.Call.Return(run)
	return _c
}

// Successf provides a mock function with given fields: l, msg, args
func (_m *ConsoleManager) Successf(l bool, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, l, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ConsoleManager_Successf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Successf'
type ConsoleManager_Successf_Call struct {
	*mock.Call
}

// Successf is a helper method to define mock.On call
//   - l bool
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) Successf(l interface{}, msg interface{}, args ...interface{}) *ConsoleManager_Successf_Call {
	return &ConsoleManager_Successf_Call{Call: _e.mock.On("Successf",
		append([]interface{}{l, msg}, args...)...)}
}

func (_c *ConsoleManager_Successf_Call) Run(run func(l bool, msg string, args ...interface{})) *ConsoleManager_Successf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(bool), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_Successf_Call) Return() *ConsoleManager_Successf_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsoleManager_Successf_Call) RunAndReturn(run func(bool, string, ...interface{})) *ConsoleManager_Successf_Call {
	_c.Call.Return(run)
	return _c
}

// TermWidth provides a mock function with given fields:
func (_m *ConsoleManager) TermWidth() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TermWidth")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ConsoleManager_TermWidth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TermWidth'
type ConsoleManager_TermWidth_Call struct {
	*mock.Call
}

// TermWidth is a helper method to define mock.On call
func (_e *ConsoleManager_Expecter) TermWidth() *ConsoleManager_TermWidth_Call {
	return &ConsoleManager_TermWidth_Call{Call: _e.mock.On("TermWidth")}
}

func (_c *ConsoleManager_TermWidth_Call) Run(run func()) *ConsoleManager_TermWidth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleManager_TermWidth_Call) Return(_a0 int) *ConsoleManager_TermWidth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_TermWidth_Call) RunAndReturn(run func() int) *ConsoleManager_TermWidth_Call {
	_c.Call.Return(run)
	return _c
}

// WarnStringf provides a mock function with given fields: msg, args
func (_m *ConsoleManager) WarnStringf(msg string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WarnStringf")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(msg, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsoleManager_WarnStringf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnStringf'
type ConsoleManager_WarnStringf_Call struct {
	*mock.Call
}

// WarnStringf is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) WarnStringf(msg interface{}, args ...interface{}) *ConsoleManager_WarnStringf_Call {
	return &ConsoleManager_WarnStringf_Call{Call: _e.mock.On("WarnStringf",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ConsoleManager_WarnStringf_Call) Run(run func(msg string, args ...interface{})) *ConsoleManager_WarnStringf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_WarnStringf_Call) Return(_a0 string) *ConsoleManager_WarnStringf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleManager_WarnStringf_Call) RunAndReturn(run func(string, ...interface{}) string) *ConsoleManager_WarnStringf_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: l, msg, args
func (_m *ConsoleManager) Warnf(l bool, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, l, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ConsoleManager_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type ConsoleManager_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - l bool
//   - msg string
//   - args ...interface{}
func (_e *ConsoleManager_Expecter) Warnf(l interface{}, msg interface{}, args ...interface{}) *ConsoleManager_Warnf_Call {
	return &ConsoleManager_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{l, msg}, args...)...)}
}

func (_c *ConsoleManager_Warnf_Call) Run(run func(l bool, msg string, args ...interface{})) *ConsoleManager_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(bool), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ConsoleManager_Warnf_Call) Return() *ConsoleManager_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsoleManager_Warnf_Call) RunAndReturn(run func(bool, string, ...interface{})) *ConsoleManager_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsoleManager creates a new instance of ConsoleManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsoleManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsoleManager {
	mock := &ConsoleManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
