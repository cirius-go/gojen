// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package constants

import (
	"fmt"
	"strings"
)

const (
	// ContextHookKeyDomain is a ContextHookKey of type domain.
	ContextHookKeyDomain ContextHookKey = "domain"
)

var ErrInvalidContextHookKey = fmt.Errorf("not a valid ContextHookKey, try [%s]", strings.Join(_ContextHookKeyNames, ", "))

var _ContextHookKeyNames = []string{
	string(ContextHookKeyDomain),
}

// ContextHookKeyNames returns a list of possible string values of ContextHookKey.
func ContextHookKeyNames() []string {
	tmp := make([]string, len(_ContextHookKeyNames))
	copy(tmp, _ContextHookKeyNames)
	return tmp
}

// ContextHookKeyValues returns a list of the values for ContextHookKey
func ContextHookKeyValues() []ContextHookKey {
	return []ContextHookKey{
		ContextHookKeyDomain,
	}
}

// String implements the Stringer interface.
func (x ContextHookKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ContextHookKey) IsValid() bool {
	_, err := ParseContextHookKey(string(x))
	return err == nil
}

var _ContextHookKeyValue = map[string]ContextHookKey{
	"domain": ContextHookKeyDomain,
}

// ParseContextHookKey attempts to convert a string to a ContextHookKey.
func ParseContextHookKey(name string) (ContextHookKey, error) {
	if x, ok := _ContextHookKeyValue[name]; ok {
		return x, nil
	}
	return ContextHookKey(""), fmt.Errorf("%s is %w", name, ErrInvalidContextHookKey)
}

// MarshalText implements the text marshaller method.
func (x ContextHookKey) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ContextHookKey) UnmarshalText(text []byte) error {
	tmp, err := ParseContextHookKey(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
